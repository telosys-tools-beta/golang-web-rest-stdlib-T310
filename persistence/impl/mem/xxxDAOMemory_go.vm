// Created on $today.date ( Time $today.time )
// Generated by $generator.name ( version $generator.version )
$env.setLanguage('GO')
#checkId($entity)
#set($entityName = $fn.capitalize(${entity.name}) )
#set($entityNameLC = $fn.toLowerCase(${entity.name}) )
#set($keyAttributesWithType = $fn.argumentsListWithType($entity.keyAttributes) )
#set($keyAttributes = $fn.argumentsList($entity.keyAttributes) )
##
#set( $keyFields = "" )
#set( $keyFmt = "" )
#foreach( $attribute in $entity.keyAttributes)
#set( $x = $fn.capitalize(${attribute.name})  )
#if( $foreach.count < 2 )
#set( $keyFields = "e.${x}" )
#set( $keyFmt = "%v" )
#else
#set( $keyFields = $keyFields + ", " + "e.${x}" )
#set( $keyFmt = $keyFmt + ", " + "%v" )
#end
#end
package memdb

import (
	"internal/entities"
	"internal/log"
	"internal/persistence/dao"	
)

//-----------------------------------------------------
// ${entityName} DAO with "in memory data" (based on a map)
//-----------------------------------------------------

// Structure definition
type ${entityName}DAOMemory struct {
	dataMap * ${entityName}DataMap
}

// Check interface implementation is valid
var _ dao.${entityName}DAO = (*${entityName}DAOMemory)(nil)

// Pseudo-construtor
func New${entityName}DAOMemory() ${entityName}DAOMemory {
	log.Debug("New${entityName}DAOMemory()")
	return ${entityName}DAOMemory{
		dataMap: Get${entityName}DataMap(),
	}
}

func (this *${entityName}DAOMemory) FindAll() []entities.${entityName} {
	log.Debug("${entityName}DAOMemory - FindAll() ")
	all := this.dataMap.Values()
	entities.Sort${entityName}(all)
	return all 
}

func (this *${entityName}DAOMemory) Find(${keyAttributesWithType}) *entities.${entityName} {
	log.Debug("${entityName}DAOMemory - Find(${keyFmt}) ", $keyAttributes)
	return this.dataMap.Read($keyAttributes)
}

func (this *${entityName}DAOMemory) Exists(${keyAttributesWithType}) bool {
	log.Debug("${entityName}DAOMemory - Exists(${keyFmt}) ", $keyAttributes)
	return this.dataMap.Exists($keyAttributes)
}

func (this *${entityName}DAOMemory) Create(e entities.${entityName}) bool {
	log.Debug("${entityName}DAOMemory - Create(%v) ", e)
	if this.Exists($keyFields) {
		return false // already exists => cannot create
	} else {
		this.dataMap.Write(e)
		return true // not found => created
	}
}

func (this *${entityName}DAOMemory) Delete(${keyAttributesWithType}) bool {
	log.Debug("${entityName}DAOMemory - Delete(${keyFmt}) ", $keyAttributes)
	if this.Exists($keyAttributes) {
		this.dataMap.Remove($keyAttributes) // delete in map
		return true  // found and deleted
	} else {
		return false // not found => not deleted
	}
}

func (this *${entityName}DAOMemory) Update(e entities.${entityName}) bool {
	log.Debug("${entityName}DAOMemory - Update(%v) ", e)
	if this.Exists($keyFields) {
		this.dataMap.Write(e) // update in map
		return true  // found and updated
	} else {
		return false // not found => not updated
	}
}
