// Created on $today.date ( Time $today.time )
// Generated by $generator.name ( version $generator.version )
#set( $env.language = 'GO' )
package rest

import (
	"net/http"
	"strings"

	"internal/log"
)

type RestControllerInterface interface {
	ParseRequestBody(r *http.Request) (interface{}, error)
	FindAll() interface{}
	Find(key []string) (bool, interface{})
	Exists(key []string) bool
	Create(entity interface{}) bool
	Delete(key []string) bool
	Update(entity interface{}) bool 
}

type RestControllerWrapper struct {
	baseURI    string
	controller RestControllerInterface
}

func DefineRestController(uri string, controller RestControllerInterface) {
	restController := RestControllerWrapper {
		baseURI: uri,
		controller: controller,
	}
	http.HandleFunc( uri,     restController.Process)
	http.HandleFunc( uri+"/", restController.Process)
}

func (this *RestControllerWrapper) Process(w http.ResponseWriter, r *http.Request) {
	log.Debug("Process - URL path : " + r.URL.Path)

	switch r.Method {
	case "GET":
		this.processGET(w, r)
	case "POST":
	    this.processPOST(w,r)
	case "PUT":
	    this.processPUT(w,r)
	case "DELETE":
		this.processDELETE(w, r)
		
	default:
		http.Error(w, "", http.StatusBadRequest)
	}
}

func (this *RestControllerWrapper) processGET(w http.ResponseWriter, r *http.Request) {
	log.Debug("processGET - URL path : " + r.URL.Path)
	if ( len(r.URL.Path) > len(this.baseURI) ) {
		// more than the URI itself => id	
		this.getById(w,r)	
	} else {
		// just the URI itself => no id
		this.getAll(w, r)
	}
}

func (this *RestControllerWrapper) getAll(w http.ResponseWriter, r *http.Request) {
	log.Debug("getAll - URL path : " + r.URL.Path)
	data := this.controller.FindAll()
	WriteJSON(w, data) 
}

func (this *RestControllerWrapper) getById(w http.ResponseWriter, r *http.Request) {
	log.Debug("getById - URL path : " + r.URL.Path)
	args := getArgs(this.baseURI , r.URL.Path) 
	found, data := this.controller.Find(args)
	log.Debug("getById : %t %v", found, data) 
	if found {
		log.Debug("getById - WriteJSON" )
		WriteJSON(w, data)
	} else {
		log.Debug("getById - Not Found" )
		ReplyNotFound(w)
	}
}

func (this *RestControllerWrapper) processPOST(w http.ResponseWriter, r *http.Request) {
	log.Debug("processPOST - URL path : " + r.URL.Path)
	entity, err := this.controller.ParseRequestBody(r)
	log.Debug("processPOST - entity %+v (type %T)", entity, entity)
	if err != nil {
		ReplyBadRequest(w)
	}
	if ( this.controller.Create(entity) ) {
		ReplyCreated(w)
	} else {
		ReplyNotCreated(w)
	}
}

func (this *RestControllerWrapper) processPUT(w http.ResponseWriter, r *http.Request) {
	log.Debug("processPUT - URL path : " + r.URL.Path)
	entity, err := this.controller.ParseRequestBody(r)
	if err != nil {
		ReplyBadRequest(w)
	}
	if ( this.controller.Update(entity) ) {
		ReplyUpdated(w)
	} else {
		ReplyNotUpdated(w)
	}
}

func (this *RestControllerWrapper) processDELETE(w http.ResponseWriter, r *http.Request) {
	log.Debug("processDELETE - URL path : " + r.URL.Path)
	args := getArgs(this.baseURI , r.URL.Path) 
	if ( this.controller.Delete(args) ) {
		ReplyDeleted(w)
	} else {
		ReplyNotDeleted(w)
	}
}

func getBaseLength(base string) int {
	baseLength := len(base)
	if baseLength > 0 {
		if base[len(base)-1] == '/' {
			baseLength--
		}
	}
	return baseLength
}
func getArgs(base string, uri string) []string {
	baseLength := getBaseLength(base)
	if baseLength >= len(uri) || baseLength == 0 {
		return []string{} // Void (no args)
	}
	
	// Keep only the right part (after the base URI)
	keyPart := uri[baseLength:]
	
	// Remove the '/' at the beginning if any
	if keyPart[0] == '/' {
		keyPart = keyPart[1:]
	}
	
	// Split if not void
	if len(keyPart) == 0 {
		return []string{} // Void (no args)
	} else {
		return strings.Split(keyPart, "/")
	}
}
