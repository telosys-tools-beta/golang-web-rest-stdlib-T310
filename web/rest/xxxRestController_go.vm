// Created on $today.date ( Time $today.time )
// Generated by $generator.name ( version $generator.version )
#set( $env.language = 'GO' )
#checkId($entity)
#set($entityName = $fn.capitalize(${entity.name}) )
#set($entityNameLC = $fn.toLowerCase(${entity.name}) )
#set($keyFields = $fn.argumentsList($entity.keyAttributes) )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count < 2 )
#set( $keyTypes = ${attribute.type} )
#else
#set( $keyTypes = $keyTypes + ", " + ${attribute.type} )
#end
#end
package rest

#set( $strconv = false )
#foreach( $attribute in $entity.keyAttributes)
#if( ${attribute.type} != "string" )
#set( $strconv = true )
#end
#end
import (
#if( $strconv )
	"strconv"
#end
	"net/http"
	
	"internal/entities"
	"internal/log"
	"internal/persistence"	
	"internal/persistence/dao"	
)

// Check interface implementation is valid
var _ RestControllerInterface = (*${entityName}RestController)(nil)

// ${entityName}RestController type ( implements RestControllerInterface )
type ${entityName}RestController struct {
	dao dao.${entityName}DAO // DAO interface (abstract)
}

// Pseudo-constructor
func New${entityName}RestController() *${entityName}RestController {
	controller := ${entityName}RestController {
		dao: persistence.Get${entityName}DAO(), // DAO implementation
	}
	// Check interface implementation is valid 
	// (the type itself does not implement the interface, only a pointer to the type)
	// see https://stackoverflow.com/questions/40823315/x-does-not-implement-y-method-has-a-pointer-receiver
//	var _ RestControllerInterface = &controller 
	return &controller
}

//func (this *${entityName}RestController) NewEntity() interface{}  {
////func (this *${entityName}RestController) NewEntity() entities.${entityName}  {
//	return entities.New${entityName}() 
//}

func (this *${entityName}RestController) ParseRequestBody(r *http.Request) (interface{}, error)  {
	log.Debug("ParseRequestBody(r)")
	entity := entities.New${entityName}() 
	err := ReadJSON(&entity, r)
	log.Debug("ParseRequestBody(r) : %+v", entity) 
	return entity, err
}

func (this *${entityName}RestController) FindAll() interface{} {
	return this.dao.FindAll()
}

#set($keyAttributesList = $fn.argumentsList($entity.keyAttributes) )
func (this *${entityName}RestController) getKeyElements(key []string) (${keyTypes}, error) {
	var conversionError error
	conversionError = nil
#foreach( $attribute in $entity.keyAttributes)
	var ${attribute.name} ${attribute.type}
#end
#set( $n = 0 )
#foreach( $attribute in $entity.keyAttributes)
	// Key element #$n
#if( $attribute.isShortType() || $attribute.isIntegerType() || $attribute.isFloatType() )
	var ${attribute.name}64 int64
	${attribute.name}64, conversionError = strconv.ParseInt(key[$n],10,64) // parse to int64
    if conversionError != nil {
    	return ${keyFields}, conversionError
    }
	${attribute.name} = ${attribute.type}(${attribute.name}64)
#elseif( $attribute.isDoubleType() || $attribute.isFloatType() )
	var ${attribute.name}64 float64
	${attribute.name}64, conversionError = strconv.ParseFloat(key[$n],64) // parse to float64
    if conversionError != nil {
    	return ${keyFields}, conversionError
    }
	${attribute.name} = ${attribute.type}(${attribute.name}64)
#else
	${attribute.name} = key[$n]	
#end
#set( $n = $n + 1 )
#end
	// Return all key elements
	return ${keyFields}, conversionError

	// var id int
	//id, err = strconv.Atoi(key[0])
    //if err != nil {
    //	return id, err
    //}
   	//return id, nil
}

func (this *${entityName}RestController) Find(key []string) (bool, interface{}) {
	log.Debug("Find(%s)", key)
	id, err := this.getKeyElements(key)
	if err != nil {
		return false, nil // Invalid Key error : not found
	} else {
		e := this.dao.Find(id)
		log.Debug("Find(%s) : dao.Find(%d) : %+v", key, id, e)
		if e != nil {
			return true, e // found
		} else {
			return false, nil // not found 
		}
	}
}

func (this *${entityName}RestController) Exists(key []string) bool {
	id, err := this.getKeyElements(key)
	if err != nil {
		return false // Invalid Key error : doesn't exist
	} else {
		return this.dao.Exists(id)
	}
}

func (this *${entityName}RestController) Create(entity interface{}) bool {
	log.Debug("Create(%+v)", entity)
	// convert to entity type with assertion 
	e := entity.(entities.${entityName})
	log.Debug("Create(%+v) : %+v", entity, e) 
	// call DAO to create the entity
	return this.dao.Create(e)
}

func (this *${entityName}RestController) Delete(key []string) bool {
	id, err := this.getKeyElements(key)
	if err != nil {
		return false // Invalid Key error : not deleted 
	} else {
		return this.dao.Delete(id)
	}
}

func (this *${entityName}RestController) Update(entity interface{}) bool {
	// convert to entity type with assertion 
	e := entity.(entities.${entityName})
	// call DAO to update the entity
	return this.dao.Update(e)
}
